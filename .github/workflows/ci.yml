name: "git action - s3 - lambda"
on:
  push:
    # paths:
    #   - 'terraform/**'
    branches:
      - main
  # pull_request:
permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
      # pull-requests: write # This is required for gh bot to comment PR
env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}
jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v4.1.7

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEV_GITHUB_ACTION_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          # role-session-name: GitHub-OIDC-TERRAFORM

      - name: üß∞ Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'  # or whatever version your lambda uses

      - name: üì¶ Install Python dependencies üì¶ Prepare Lambda ZIP (excluding GitHub workflow files)
        run: |
          rm -f lambda_package.zip
          python -m pip install --upgrade pip
          # pip install -r requirements.txt -t package/
          pip install -r requirements.txt -t .
          zip -r lambda_package.zip . -x ".git/*" ".github/*" "*.zip" "*__pycache__/*"

      # - name: üì¶ Prepare Lambda ZIP (excluding GitHub workflow files)
      #   run: |
      #     pip install -r requirements.txt -t .
      #     zip -r lambda_package.zip . -x ".git/*" ".github/*" "*.zip" "*__pycache__/*"
          # mkdir -p build
          # cp -r package/* build/
          # cp -r *.py build/
          # zip -r lambda_package.zip build -x ".github/*"

      - name: ‚òÅÔ∏è Upload Lambda ZIP to S3
        run: |
          aws s3 cp lambda_package.zip s3://${{ secrets.LAMBDA_S3_BUCKET }}/lambdatest121/lambda_package.zip

      - name: üõ†Ô∏è Update Lambda function code
        run: |
          aws lambda update-function-code \
            --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
            --s3-bucket ${{ secrets.LAMBDA_S3_BUCKET }} \
            --s3-key lambdatest121/lambda_package.zip \
            --region ${{ secrets.AWS_REGION }}

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v2.0.3
      #   with:
      #     terraform_version: latest

      # - name: Terraform Init
      #   id: init
      #   working-directory: ./terraform
      #   env:
      #     AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
      #     AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
      #   run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      # - name: Terraform Plan
      #   id: plan
      #   working-directory: ./terraform
      #   run: terraform plan 
      #   # if: github.event_name == 'pull_request'
      #   continue-on-error: true

      # - name: Terraform Plan Status
      #   working-directory: ./terraform
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1

      # - name: Terraform Apply
      #   working-directory: ./terraform
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push' && !contains(github.event.head_commit.message, 'destroy')
      #   run: terraform apply -auto-approve -input=false

      # - name: Terraform Destroy
      #   working-directory: ./terraform
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(github.event.head_commit.message, 'destroy')
      #   run: terraform destroy -auto-approve -input=false
