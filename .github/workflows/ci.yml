name: "git action - s3 - lambda"
on:
  push:
    # paths:
    #   - 'terraform/**'
    branches:
      - pythondev  # Trigger for dev deployments
  pull_request:
    branches:
      - pythonstage  # Trigger stage deployment on PR to stage
      - pythonprod   # Trigger prod deployment on PR to prod from stage
    types: [closed]  # Only trigger after PR is merged
permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
jobs:
  deploy:
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v4.1.7

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEV_GITHUB_ACTION_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          # role-session-name: GitHub-OIDC-TERRAFORM

      - name: üß∞ Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'  # or whatever version your lambda uses

      - name: üì¶ Install Python dependencies üì¶ Prepare Lambda ZIP (excluding GitHub workflow files)
        run: |
          rm -f lambda_package.zip
          python -m pip install --upgrade pip
          # pip install -r requirements.txt -t package/
          pip install -r requirements.txt -t .
          zip -r lambda_package.zip . -x ".git/*" ".github/*" "*.zip" "*__pycache__/*"

      - name: ‚òÅÔ∏è Determine Environment and Lambda Function
        id: set-vars
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"

          # Handle push to pythondev
          if [[ "$GITHUB_EVENT_NAME" == "push" && "$BRANCH_NAME" == "pythondev" ]]; then
            echo "env_path=pythondev" >> $GITHUB_OUTPUT
            echo "lambda_name=${{ secrets.LAMBDA_FUNCTION_NAME_DEV }}" >> $GITHUB_OUTPUT

          # Handle merged PR to pythonstage
          elif [[ "$GITHUB_EVENT_NAME" == "pull_request" && "$BRANCH_NAME" == "pythonstage" ]]; then
            echo "env_path=pythonstage" >> $GITHUB_OUTPUT
            echo "lambda_name=${{ secrets.LAMBDA_FUNCTION_NAME_STAGE }}" >> $GITHUB_OUTPUT

          # Handle merged PR to pythonprod (only if from pythonstage)
          elif [[ "$GITHUB_EVENT_NAME" == "pull_request" && "$BRANCH_NAME" == "pythonprod" && "${{ github.event.pull_request.head.ref }}" == "pythonstage" ]]; then
            echo "env_path=pythonprod" >> $GITHUB_OUTPUT
            echo "lambda_name=${{ secrets.LAMBDA_FUNCTION_NAME_PROD }}" >> $GITHUB_OUTPUT

          else
            echo "‚ùå Unsupported branch or condition"
            exit 1
          fi

      - name: ‚òÅÔ∏è Upload Lambda ZIP to S3
        run: |
          BRANCH_NAME=${GITHUB_REF_NAME}
          aws s3 cp lambda_package.zip s3://${{ secrets.LAMBDA_S3_BUCKET }}/lambdatest121/${{ steps.set-vars.outputs.env_path }}/lambda_package.zip

      - name: üõ†Ô∏è Update Lambda function code
        run: |
          aws lambda update-function-code \
            --function-name ${{ steps.set-vars.outputs.lambda_name }} \
            --s3-bucket ${{ secrets.LAMBDA_S3_BUCKET }} \
            --s3-key lambdatest121/lambda_package.zip \
            --region ${{ secrets.AWS_REGION }}
