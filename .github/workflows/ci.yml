name: "git action - s3 - cloudfront"
on:
  push:
    branches:
      - s3_cloudfront
  pull_request:
    branches:
      - pythonstage  # Trigger stage deployment on PR to stage
      - pythonprod   # Trigger prod deployment on PR to prod from stage
    types: [closed]  # Only trigger after PR is merged
permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
jobs:
  deploy:
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v4.1.7

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEV_GITHUB_ACTION_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          # role-session-name: GitHub-OIDC-TERRAFORM

      - name: üß∞ Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'  # Use the version your Lambda uses

      - name: üì¶ Install dependencies
        run: npm install --legacy-peer-deps

      - name: üõ† Build React App
        run: npm run build

      - name: ‚òÅÔ∏è Upload  to S3
        run: |
          aws s3 cp lambda_package.zip s3:///lambdatest121/lambda_package.zip
          aws s3 sync build/ s3://${{ secrets.LAMBDA_S3_BUCKET }}/s3-cloudfront/ --delete

      - name: üåê Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DIST_ID }} \
            --paths "/*"
